#include <bits/stdc++.h>
using namespace std;
int i=0, j=0;
#define ll long long

int pageFaults(int pages[], int n, int capacity) 
{ 
    unordered_set<int> s; 
    unordered_map<int, int> indexes; 
    int page_faults = 0; 
    for (int i=0; i<n; i++) 
    { 
        if (s.size() < capacity) 
        { 
            if (s.find(pages[i])==s.end()) 
            { 
                s.insert(pages[i]); 
                page_faults++; 
            } 
            indexes[pages[i]] = i; 
        } 
        else
        { 
            if (s.find(pages[i]) == s.end()) 
            { 
                int lru = INT_MAX, val; 
                for (auto it=s.begin(); it!=s.end(); it++) 
                { 
                    if (indexes[*it] < lru) 
                    { 
                        lru = indexes[*it]; 
                        val = *it; 
                    } 
                } 
                s.erase(val); 
                s.insert(pages[i]); 
                page_faults++; 
            } 
            indexes[pages[i]] = i; 
        } 
    } 
  
    return page_faults; 
} 
void solve(){
	int n, cap; cin>>n;
	int arr[n];
	for(i=0; i<n; i++)	cin>>arr[i];
	cin>>cap;
	cout<<pageFaults(arr, n, cap)<<endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int i, j, k, n, t;
    cin>>t;
    while(t--){
        solve();
    }
	return 0;
}

